# -*- coding: utf-8 -*-
"""KNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fb__TG-osRqXwF_R_6mQ8WHVfy-JDZ1I
"""

import sklearn
import pandas
import numpy as np
import os
import matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import StratifiedShuffleSplit
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix

from sklearn.model_selection import train_test_split

#os.chdir('/content/drive/MyDrive/dataset')

df = pandas.read_csv('valores.csv')
df

x = df[['TP-Link_55C0', ' TP-Link_55C0_5G', ' Thread 2G']].values
x

y = df[df.columns[-1]].values
y == "Quarto"

z = df[df.columns[-1]].values
z == "Sala"

w = df[df.columns[-1]].values
w == "Cozinha"

m = x[y == "Quarto"]
h = x[y == "Sala"]
g = x[y == "Cozinha"]


plt.plot(h[:,0],h[:,1],'bo',label='Quarto')
plt.plot(m[:,0],m[:,1],'ro',label='Sala')
plt.plot(g[:,0],g[:,1],'ko',label='Cozinha')

plt.legend()
plt.show()

#x.mean(axis=0) # metodo mean(media) 0 eh por coluna 1 por linha
#x.std(axis=0) # desvio padrao

xnorm = (x-x.mean(axis=0))/x.std(axis=0)

model = KNeighborsClassifier(n_neighbors = 4, weights='uniform')

model.fit(xnorm,y)

# Fase 2 separacao de treino e teste
treina , teste = train_test_split(xnorm, test_size = 0.15, train_size = 0.70)
X, Y = train_test_split(y, test_size = 0.15, train_size = 0.70)

xtest = np.array([[68],[10],[41]])
xtest_norm=(xtest-x.mean(axis=0)) / (x.std(axis=0))
model.predict_proba(xtest_norm)

sss = StratifiedShuffleSplit(n_splits=10, test_size=0.15, train_size=0.70, random_state=0)

lacc = []
# Fase 3
# Fazendo validacao, por meio do conjunto de testes
for train_index,test_index in sss.split(treina , X):
    xtrain = treina[train_index]
    ytrain = X[train_index]
    xtest  = treina[test_index]
    ytest  = X[test_index]

    model.fit(xtrain,ytrain)

    ypred=model.predict(xtest)
    acc = accuracy_score(ytest,ypred)

    print(acc)
    lacc.append(acc)

print("MÃ©dia: %4.3f Std: %4.3f "%(np.mean(lacc),np.std(lacc)))

# Fase 4
model.fit(treina, X)

predicao = model.predict(xnorm)
acc = accuracy_score(y , predicao)
print(acc)

precisao = precision_score(y, predicao, average = 'macro')
print(precisao)

recall = recall_score(y, predicao, average='macro')
print(recall)

f1 = f1_score(y, predicao, average = 'macro')
print(f1)

matriz = confusion_matrix(y, predicao)

print(matriz)
